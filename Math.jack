// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */

class Math {
    static Array twoToThe;
    static int twoqy;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        let twoqy = 0;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -(x);
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, counter;
        let sum = 0;
        let shiftedX = x;
        let counter = 0;
        while(counter < 16) {
            if(Math.bit(y, counter)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let counter = counter + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    
    // needs optimization
    function int divide(int x, int y) {
        var int q, abx, aby, doubleY;
        let abx = Math.abs(x);
        let aby = Math.abs(y);
        if(aby > abx) {
            let twoqy = 0;
            return 0;
        } else {
            let doubleY = aby + aby;
            if(doubleY > 0) {
                let q = Math.divide(abx, doubleY);
            } else {
                let q = 0;
            }
            if(Math.bit(q, 0)) {
                let twoqy = twoqy + doubleY;
            } else {
                let twoqy = twoqy;
            }
            
            if((abx - twoqy) < aby) {
                if(((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
                    return q + q;
                } else {
                    return -(q + q);
                }
            } else {
                if(((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
                    return q + q + 1;
                } else {
                    return -(q + q + 1);
                }
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int n, j, y, z, zsquared, doubler;
        let n = 0;
        let doubler = 1;
        while(((twoToThe[n] < x) | (twoToThe[n] = x)) & (twoToThe[n] > 0)) {
            let n = n + 1;
        }
        if(Math.bit(n, 0)) {
            let n = n + 1;
        } else {
            let n = n;
        }
        let j = (n/2) - 1;
        let y = 0;
        while(j > -1) {
            let z = y + (twoToThe[j]);
            let zsquared = Math.multiply(z, z);
            if(((zsquared < x) | (zsquared = x)) & (zsquared > 0)) {
                let y = z;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) {
            return a;
        } else {
            return b;
        }
    }

    function boolean bit(int x, int j) {
        return (x & twoToThe[j]);
    }
}
