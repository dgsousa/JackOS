// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        do Screen.initTwoToThe();
        let color = true;
        return;
    }

    function void initTwoToThe() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int row;
        let row = 0;
        do Screen.setColor(false);
        while(row < 256) {
            do Screen.drawLine(0, row, 511, row);
            let row = row + 1;
        }
        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int col, row, bitCol, bitValue, address, value;
        let row = (y * 32);
        let col = (x / 16);
        let bitCol = x - (col * 16); // gets remainder for bitValue
        let address = 16384 + row + col;
        let value = Memory.peek(address);
        if(color) {
            do Memory.poke(address, (value | twoToThe[bitCol]));
        } else {
            do Memory.poke(address, (value & (~twoToThe[bitCol])));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, tracker;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let tracker = 0;
        if((dx = 0) | (dy = 0)) {
            if(dx = 0) {
                if(dy > 0) {
                    while((b < dy) | (b = dy)) {
                        do Screen.drawPixel(x1, (y1 + b));
                        let b = b + 1;
                    }
                } else {
                    while((b > dy) | (b = dy)) {
                        do Screen.drawPixel(x1, (y1 + b));
                        let b = b - 1;
                    }
                }
            } else {
                if(dx > 0) {
                    while((a < dx) | (a = dx)) {
                        do Screen.drawPixel((x1 + a), y1);
                        let a = a + 1;
                    }
                } else {
                    while((a > dx) | (a = dx)) {
                        do Screen.drawPixel((x1 + a), y1);
                        let a = a - 1;
                    }
                }
            }
        } else {
            if(dx < 0) {
                if(dy < 0) {
                    while(((a > dx) | (a = dx)) & ((b > dy) | (b = dy))) {
                        do Screen.drawPixel((x1 + a), (y1 + b));
                        if(tracker < 0) {
                            let a = a - 1;
                            let tracker = tracker - dy;
                        } else {
                            let b = b - 1;
                            let tracker = tracker + dx;
                        }
                    }
                    // fourth quadrant
                } else {
                    while(((a > dx) | (a = dx)) & ((b < dy) | (b = dy))) {
                        do Screen.drawPixel((x1 + a), (y1 + b));
                        if(tracker < 0) {
                            let a = a - 1;
                            let tracker = tracker + dy;
                        } else {
                            let b = b + 1;
                            let tracker = tracker + dx;
                        }
                    }
                    // second quadrant
                }
            } else {
                if(dy < 0) {
                    while(((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
                        do Screen.drawPixel((x1 + a), (y1 + b));
                        if(tracker < 0) {
                            let a = a + 1;
                            let tracker = tracker - dy;
                        } else {
                            let b = b - 1;
                            let tracker = tracker - dx;
                        }
                    }
                    // third quadrant
                } else {
                    while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
                        do Screen.drawPixel((x1 + a), (y1 + b));
                        if(tracker < 0) {
                            let a = a + 1;
                            let tracker = tracker + dy;
                        } else {
                            let b = b + 1;
                            let tracker = tracker - dx;
                        }
                    }
                    // first quadrant
                }
            }

        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int counter, dy, currenty;
        let counter = 0;
        let dy = y2 - y1;
        if(dy > 0) {
            while(counter < dy) {
                let currenty = y1 + counter;
                do Screen.drawLine(x1, currenty, x2, currenty);
                let counter = counter + 1;
            }
        } else {
            while(counter > dy) {
                let currenty = y1 + counter;
                do Screen.drawLine(x1, currenty, x2, currenty);
                let counter = counter - 1;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, start, finish, rsquared, dysquared, dist;
        let rsquared = r * r;
        let dy = -r;
        while((dy < r) | (dy = r)) {
            let dysquared = dy * dy;
            let dist = Math.sqrt(rsquared - dysquared);
            let start = x - dist;
            let finish = x + dist;
            do Screen.drawLine(start, (y + dy), finish, (y + dy));
            let dy = dy + 1;
        }
        return;
    }
}