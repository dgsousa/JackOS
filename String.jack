// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array self;
    field int maxLengthField;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0) {
            let self = Array.new(1);
        } else {
            let self = Array.new(maxLength);
        }
        let maxLengthField = maxLength;
        let length = 0;
        return this; 
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(self);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < length) {
            return self[j];
        } else {
            return -1;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let self[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if((length < maxLengthField)) {
            let self[length] = c;
            let length = length + 1;
        } else {
            let length = length;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0) {
            do setCharAt((length - 1), 0);
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int counter, v, d;
        var boolean isNeg;
        let counter = 0;
        let v = 0;
        if(charAt(0) = 45) {
            let isNeg = true;
            let counter = 1;
        } else {
            let isNeg = false;
        }
        while((charAt(counter) > 47) & (charAt(counter) < 58)) {
            let d = charAt(counter) - 48;
            let v = (v * 10) + d;
            let counter = counter + 1;
        }
        if(isNeg) {
            return -(v);
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int counter, intStringLength, currentLength;
        var String intString;
        let counter = 0;
        let currentLength = length();
        while(counter < currentLength) {
            do eraseLastChar();
            let counter = counter + 1;
        }
        let counter = 0;
        if(val < 0) {
            do appendChar(45);
            let intString = int2String((-val));
            let intStringLength = intString.length();
            while(counter < intStringLength) {
                do appendChar(intString.charAt(counter)); // [1 + counter] = intString.charAt(counter);
                let counter = counter + 1;
            }
        } else {
            let intString = int2String(val);
            let intStringLength = intString.length();
            while(counter < intStringLength) {
                do appendChar(intString.charAt(counter));
                let counter = counter + 1;
            }
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    method String int2String(int val) {
        var String next;
        var int lastDigit, tenth;
        let tenth = val / 10;
        let lastDigit = val - (tenth * 10); // proxy for modulo operator
        let lastDigit = lastDigit + 48;
        if(val < 10) {
            let next = String.new(5);
            do next.appendChar(lastDigit);
            return next;
        } else {
            let next = int2String(tenth);
            do next.appendChar(lastDigit);
            return next;
        }
    }
}
